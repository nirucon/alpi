#!/usr/bin/env bash
# install_optimize.sh — Arch Linux post-install "Optimize" step
# Author: You + ChatGPT
# Safe defaults, idempotent changes, lots of comments.

set -Eeuo pipefail

########################
# Pretty logging
########################
NC="\033[0m"; BLD="\033[1m"
GRN="\033[1;32m"; RED="\033[1;31m"; YEL="\033[1;33m"; BLU="\033[1;34m"; CYN="\033[1;36m"

say ()  { printf "${BLU}[ALPI]${NC} %s\n" "$*"; }
step()  { printf "${GRN}[STEP]${NC} %s\n" "$*"; }
warn()  { printf "${YEL}[WARN]${NC} %s\n" "$*"; }
fail()  { printf "${RED}[FAIL]${NC} %s\n" "$*"; exit 1; }
info()  { printf "${CYN}[INFO]${NC} %s\n" "$*"; }

trap 'warn "Something went wrong in: ${BASH_COMMAND}"' ERR

require_root() {
  if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
    fail "Run as root (use sudo)."
  fi
}
require_root

########################
# Helpers
########################
backup_once() {
  # backup_once /path/to/file  -> creates file.bak once
  local f="$1"
  [[ -f "$f" && ! -f "$f.bak" ]] && cp -a -- "$f" "$f.bak" || true
}

ensure_pkg() {
  # install if missing; quiet, idempotent
  local pkgs=("$@")
  pacman -Sy --needed --noconfirm "${pkgs[@]}"
}

set_kv_in_ini() {
  # set_kv_in_ini FILE SECTION KEY VALUE
  # Adds section if missing; replaces key or appends under section.
  local file="$1" section="$2" key="$3" value="$4"
  backup_once "$file"
  if ! grep -q "^\[$section\]" "$file" 2>/dev/null; then
    printf "\n[%s]\n%s=%s\n" "$section" "$key" "$value" >>"$file"
    return 0
  fi
  # Replace existing key in section, or append at end of that section.
  awk -v s="[$section]" -v k="$key" -v v="$value" '
    BEGIN{ins=0}
    $0==s {print;ins=1;found=0;next}
    ins==1 && $0 ~ /^\[/ { # left section without finding key
      if(found==0){print k"="v}
      ins=0
    }
    ins==1 {
      if($0 ~ "^"k"="){print k"="v; found=1; next}
    }
    {print}
    END{
      if(ins==1 && found==0){print k"="v}
    }
  ' "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
}

replace_or_add_line() {
  # replace_or_add_line FILE REGEX NEWLINE
  local file="$1" rx="$2" newline="$3"
  backup_once "$file"
  if grep -Eq "$rx" "$file" 2>/dev/null; then
    sed -E -i "s|$rx|$newline|" "$file"
  else
    printf "%s\n" "$newline" >> "$file"
  fi
}

have_cmd() { command -v "$1" >/dev/null 2>&1; }

########################
# Environment facts
########################
ensure_pkg pciutils usbutils lsb-release coreutils sed awk grep util-linux

CPU_VENDOR="$(lscpu | awk -F: '/Vendor ID/{gsub(/^[ \t]+/,"",$2); print $2}')"
IS_VM="$(systemd-detect-virt || true)"
MEM_KB="$(grep -Eo 'MemTotal:[[:space:]]+[0-9]+' /proc/meminfo | awk '{print $2}')"
MEM_GB=$(( (MEM_KB + 1048575) / 1048576 ))

info "CPU vendor: ${CPU_VENDOR:-unknown}"
info "Virtualization: ${IS_VM:-none}"
info "RAM (GiB): ${MEM_GB}"

########################
# Microcode & firmware
########################
step "Install CPU microcode (safer & better stability)"
case "$CPU_VENDOR" in
  *GenuineIntel*|*Intel*) ensure_pkg intel-ucode ;;
  *AuthenticAMD*|*AMD*)   ensure_pkg amd-ucode ;;
  *) warn "Unknown vendor; skipping microcode auto-install." ;;
esac

# linux-firmware is default on Arch; ensure present
ensure_pkg linux-firmware
info "Firmware package present. This script does NOT delete firmware blobs (risky on mixed hardware)."

########################
# zram via systemd-zram-generator
########################
step "Enable compressed RAM (zram) with sane defaults"
ensure_pkg systemd zram-generator

# Size: 50% of RAM, max 8GiB; swappiness tuned later
install -dm755 /etc/systemd/zram-generator.conf.d
cat >/etc/systemd/zram-generator.conf.d/90-alpi.conf <<'EOF'
# ZRAM configuration generated by ALPI Optimize
[zram0]
zram-size = ram / 2
compression-algorithm = zstd
writeback-device = auto
swap-priority = 100
EOF

systemctl enable --now systemd-zram-setup@zram0.service || true

########################
# journald optimization
########################
step "Tune systemd-journald (size caps, rate limiting, persistence)"
backup_once /etc/systemd/journald.conf
set_kv_in_ini /etc/systemd/journald.conf Journal Storage persistent
set_kv_in_ini /etc/systemd/journald.conf Journal SystemMaxUse 500M
set_kv_in_ini /etc/systemd/journald.conf Journal RuntimeMaxUse 200M
set_kv_in_ini /etc/systemd/journald.conf Journal MaxRetentionSec 1month
set_kv_in_ini /etc/systemd/journald.conf Journal RateLimitIntervalSec 30s
set_kv_in_ini /etc/systemd/journald.conf Journal RateLimitBurst 1000
systemctl restart systemd-journald

########################
# /tmp check
########################
step "Ensure /tmp is tmpfs (Arch default)"
if mount | grep -qE 'on /tmp type tmpfs'; then
  info "/tmp already on tmpfs — OK."
else
  warn "/tmp is not tmpfs; adding systemd tmp.mount unit."
  install -dm755 /etc/systemd/system
  cat >/etc/systemd/system/tmp.mount <<'EOF'
[Unit]
Description=Temporary Directory (/tmp)
Documentation=man:hier(7)
ConditionPathIsSymbolicLink=!/tmp

[Mount]
What=tmpfs
Where=/tmp
Type=tmpfs
Options=mode=1777,strictatime,nosuid,nodev

[Install]
WantedBy=multi-user.target
EOF
  systemctl enable --now tmp.mount
fi

########################
# sysctl tunables
########################
step "Apply conservative sysctl tunables"
SYSCTL_FILE=/etc/sysctl.d/90-alpi-optimized.conf
backup_once "$SYSCTL_FILE"
cat >"$SYSCTL_FILE" <<'EOF'
# ALPI Optimize — safe, conservative tunables

# Swappiness: prefer RAM; still swap under pressure
vm.swappiness = 60

# Encourage cache retention a bit
vm.vfs_cache_pressure = 50

# More watches for modern desktops/editors
fs.inotify.max_user_watches = 1048576
fs.inotify.max_user_instances = 1024

# TCP: enable BBR if available; cubic is default
net.core.default_qdisc = cake
net.ipv4.tcp_congestion_control = bbr

# Slightly faster client-side connect failures
net.ipv4.tcp_fastopen = 3
EOF

# Guard against unavailable qdisc
if ! sysctl -e net.core.default_qdisc 2>/dev/null | grep -q cake; then
  sed -i 's/default_qdisc = cake/default_qdisc = fq/' "$SYSCTL_FILE"
fi

sysctl --system >/dev/null

########################
# pacman.conf QOL
########################
step "Improve pacman UX (colors, parallel downloads)"
backup_once /etc/pacman.conf
replace_or_add_line /etc/pacman.conf '^[#]*Color' 'Color'
replace_or_add_line /etc/pacman.conf '^[#]*VerbosePkgLists' 'VerbosePkgLists'
# Bump ParallelDownloads to 10 (safe for most users)
if grep -Eq '^[#]*ParallelDownloads' /etc/pacman.conf; then
  sed -E -i 's/^[#]*ParallelDownloads *= *.*/ParallelDownloads = 10/' /etc/pacman.conf
else
  # add under [options]
  set_kv_in_ini /etc/pacman.conf options ParallelDownloads 10
fi
# Keep signatures as per defaults; do not weaken security.

########################
# makepkg parallelism & compressors
########################
step "Tune makepkg for parallel builds & compressors"
backup_once /etc/makepkg.conf
CORES="$(nproc)"
sed -E -i "s|^#?MAKEFLAGS=.*|MAKEFLAGS=\"-j${CORES}\"|" /etc/makepkg.conf
# Compressors: use all threads where supported
sed -E -i 's|^#?COMPRESSXZ=.*|COMPRESSXZ=(xz -c -T0 -z -)|' /etc/makepkg.conf
sed -E -i 's|^#?COMPRESSZST=.*|COMPRESSZST=(zstd -c -T0 -z -q -19 -)|' /etc/makepkg.conf

########################
# Clean-up automation (paccache) & fstrim
########################
step "Enable pacman cache maintenance & periodic SSD TRIM"
ensure_pkg pacman-contrib util-linux
systemctl enable --now paccache.timer    # keeps 3 versions by default
systemctl enable --now fstrim.timer

########################
# systemd-oomd (gentle configuration)
########################
step "Enable systemd-oomd with conservative thresholds"
ensure_pkg systemd
install -dm755 /etc/systemd/oomd.conf.d
cat >/etc/systemd/oomd.conf.d/90-alpi.conf <<'EOF'
# Trigger only under real pressure, avoid desktop false positives
[OOM]
DefaultMemoryPressureDurationSec=2min
DefaultMemoryPressureThreshold=70%
EOF
systemctl enable --now systemd-oomd.service || true

########################
# Swappiness alignment for zram (optional tweak)
########################
step "Align swappiness with zram"
# Slightly higher swappiness is good with zram; already set to 60 above.

########################
# Report
########################
say "================ Optimization Summary ================"
info "Microcode: $(pacman -Qq | grep -E '^(intel|amd)-ucode$' || echo 'none')"
info "ZRAM: $(swapon --show --noheadings || echo 'no swap shown')"
info "journald: Storage=$(grep -E '^Storage=' /etc/systemd/journald.conf | cut -d= -f2), SystemMaxUse=500M"
info "pacman: ParallelDownloads=$(grep -E '^ParallelDownloads' /etc/pacman.conf | awk '{print $3}')"
info "makepkg: $(grep -E '^(MAKEFLAGS|COMPRESSXZ|COMPRESSZST)=' /etc/makepkg.conf | tr '\n' '; ')"
info "sysctl.d: $(basename "$SYSCTL_FILE") applied"
systemctl is-enabled --quiet paccache.timer && info "paccache.timer: enabled"
systemctl is-enabled --quiet fstrim.timer   && info "fstrim.timer: enabled"
systemctl is-enabled --quiet systemd-oomd.service && info "systemd-oomd: enabled"
say "Done. You can reboot any time to enjoy the changes."
